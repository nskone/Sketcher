// Generated by CoffeeScript 1.3.3
(function() {
  var Layer, Point, RaphaelCanvas, Wall,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    var canvas, mapdiv, wall;
    mapdiv = $("#map");
    canvas = new RaphaelCanvas(mapdiv, 50);
    wall = new Wall(10, 10);
    canvas.addLayer(wall);
    return canvas.setActiveLayer(wall);
  });

  /* -------------------------------------------- 
       Begin point.coffee 
  --------------------------------------------
  */


  Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.distance = function(p) {
      return Math.abs(Math.sqrt(Math.pow(this.x - p.x, 2) + Math.pow(this.y - p.y, 2)));
    };

    Point.prototype.toString = function() {
      return "Point: " + this.x + "," + this.y;
    };

    return Point;

  })();

  /* -------------------------------------------- 
       Begin layer.coffee 
  --------------------------------------------
  */


  Layer = (function() {

    function Layer(width, height) {
      this.width = width;
      this.height = height;
    }

    Layer.prototype.toString = function() {
      return "A Layer";
    };

    Layer.prototype.findSquare = function(point) {
      return new Point(Math.floor(point.x), Math.floor(point.y));
    };

    Layer.prototype.mousedown = function(point) {
      return null;
    };

    Layer.prototype.mouseup = function(point) {
      return null;
    };

    Layer.prototype.mousemove = function(point) {
      return null;
    };

    return Layer;

  })();

  /* -------------------------------------------- 
       Begin wall.coffee 
  --------------------------------------------
  */


  Wall = (function(_super) {
    var Line;

    __extends(Wall, _super);

    function Wall() {
      return Wall.__super__.constructor.apply(this, arguments);
    }

    Wall.prototype.toString = function() {
      return "A Wall Layer";
    };

    Line = (function() {

      function Line(coordinate) {
        this.coordinate = coordinate;
        if (coordinate.y % 2 === 0) {
          this.point1 = new Point(coordinate.x, coordinate.y);
          this.point2 = new Point(coordinate.x, coordinate.y + 1);
        } else {
          this.point1 = new Point(coordinate.x, coordinate.y);
          this.point2 = new Point(coordinate.x + 1, coordinate.y);
        }
      }

      Line.prototype.getPoints = function() {
        return [this.point1, this.point2];
      };

      Line.prototype.getAttr = function() {
        return {};
      };

      return Line;

    })();

    Wall.prototype.findPath = function(point) {
      var l1, l2, l3, l4;
      l1 = new Line(new Point(Math.floor(point.x), Math.floor(point.y) * 2));
      l2 = new Line(new Point(Math.floor(point.x) + 1, Math.floor(point.y) * 2));
      l3 = new Line(new Point(Math.floor(point.x), Math.floor(point.y) * 2 + 1));
      l4 = new Line(new Point(Math.floor(point.x) + 1, Math.floor(point.y) * 2 + 1));
      this.parent.draw(l1);
      this.parent.draw(l2);
      this.parent.draw(l3);
      return this.parent.draw(l4);
    };

    Wall.prototype.mousedown = function(point) {
      alert("Clicked " + point);
      this.findPath(point);
      return null;
    };

    Wall.prototype.mouseup = function(point) {
      return null;
    };

    Wall.prototype.mousemove = function(point) {
      return null;
    };

    return Wall;

  })(Layer);

  /* -------------------------------------------- 
       Begin raphaelcanvas.coffee 
  --------------------------------------------
  */


  RaphaelCanvas = (function() {

    function RaphaelCanvas(div, gridsize) {
      this.div = div;
      this.gridsize = gridsize;
      this.layers = [];
      this.activeLayer = null;
      this.width = this.div.width();
      this.height = this.div.height();
      this.left = this.div.position().left;
      this.top = this.div.position().top;
      this.paper = new Raphael(this.div.get(0), this.width, this.height);
      this.foreground = this.paper.rect(0, 0, this.width, this.height);
      this.foreground.attr({
        fill: "red",
        opacity: 0
      });
      this.foreground.owner = this;
      this.foreground.mousedown(this.mousedown);
      this.foreground.mouseup(this.mouseup);
      this.foreground.mousemove(this.mousemove);
    }

    RaphaelCanvas.prototype.toString = function() {
      return "The Canvas";
    };

    RaphaelCanvas.prototype.addLayer = function(layer) {
      this.layers.push(layer);
      return layer.parent = this;
    };

    RaphaelCanvas.prototype.setActiveLayer = function(layer) {
      return this.activeLayer = layer;
    };

    RaphaelCanvas.prototype.getEventPoint = function(e) {
      var x, y;
      x = (e.pageX - this.left) / this.gridsize;
      y = (e.pageY - this.top) / this.gridsize;
      return new Point(x, y);
    };

    RaphaelCanvas.prototype.draw = function(item) {
      var pathString, point, points, _i, _len;
      points = item.getPoints();
      pathString = "M " + points[0].x + " " + points[0].y + " ";
      points = points.slice(1, points.length);
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        pathString += "L " + point.x + " " + point.y + " ";
      }
      return null;
    };

    RaphaelCanvas.prototype.mousedown = function(e) {
      var canvas;
      canvas = this.owner;
      if (canvas.activeLayer) {
        return canvas.activeLayer.mousedown(canvas.getEventPoint(e));
      }
    };

    RaphaelCanvas.prototype.mouseup = function(e) {
      var canvas;
      canvas = this.owner;
      if (canvas.activeLayer) {
        return canvas.activeLayer.mouseup(canvas.getEventPoint(e));
      }
    };

    RaphaelCanvas.prototype.mousemove = function(e) {
      var canvas;
      canvas = this.owner;
      if (canvas.activeLayer) {
        return canvas.activeLayer.mousemove(canvas.getEventPoint(e));
      }
    };

    return RaphaelCanvas;

  })();

}).call(this);
